from PIL import Image
from vision_functions import obtain_query_response_from_image
from nlp_functions import llm_query, select_answer

def llm_query(question: str)->str:
    '''Answers a text question using GPT-3. The input question is always a formatted string with a variable in it.
    
    Parameters
    ----------
    question: str
        the text question to ask. Must not contain any reference to 'the image' or 'the photo', etc.
    '''
    return llm_query(question)


def select_answer(info: dict, question: str, options: List[str]) -> str:
    return select_answer(info, question, options)

class ImagePatch:
    def __init__(self, image, left: int=None, lower: int=None, right: int=None, upper: int=None):
        if left is None and right is None and upper is None and lower is None:
            self.cropped_image = image
            self.left = 0
            self.lower = 0
            self.right = image.shape[2]
            self.upper = image.shape[1]
        else:
            self.cropped_image = image[:, lower:upper, left:right]
            self.left = left
            self.lower = lower
            self.right = right
            self.upper = upper

        self.width = self.cropped_image.shape[2]
        self.height = self.cropped_image.shape[1]
    
    def simple_query(self, query: str):
        """Answer basic queries about the image patch. 
        Parameters
        ----------
        query: str
            the simple query about the image patch in the form of a question
        
        Returns
        -------
        str
            a guess for the answer to the question
        """
        answer = obtain_query_response_from_image(self.cropped_image, query)
        return answer
    
# Examples of using the ImagePatch class


# Does the flag have two or three colors?
# possible answers: ['The flag has three colors.', 'The flag has two colors.']
def execute_command(image, possible_answers, query)->str:
    image_patch = ImagePatch(image)
    flag_patches = image_patch.find(""flag"")
    if flag_patches:
        flag_patch = flag_patches[0]
        flag_patch_colors = flag_patch.simple_query(""Which colors are present on the flag?"")
        info = {"Colors in the flag": flag_patch_colors}
        answer = select_answer(info, query, possible_answers)
        return answer
    else:
        search_object = "flag"
        visual_search_ans = image_patch.visual_search(search_object, query, possible_answers):
        if visual_search_ans:
            return visual_search_ans
        return "No flag found in the image even after visual search"


# What is the color of the tent?
# possible answers: ['The color of the tent is green.', 'The color of the tent is blue.', 'The color of the tent is white.', 'The color of the tent is yellow.']
def execute_command(image, possible_answers, query)->str:
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if tent_patches:
        tent_patch = tent_patches[0]
        tent_patch_color = tent_patch.simple_query(""What is the color of the tent?"")
        info = {"Color of tent": tent_patch_color}
        answer = select_answer(info, query, possible_answers)
        return answer
    else:
        search_object = "tent"
        visual_search_ans = image_patch.visual_search(search_object, query, possible_answers):
        if visual_search_ans:
            return visual_search_ans
        return "No tent found in the image even after visual search"



# What is the color of the little girl's shirt?
# possible answers: ["The color of the little girl's shirt is pink.", "The color of the little girl's shirt is white.", "The color of the little girl's shirt is yellow.", "The color of the little girl's shirt is black."]
def execute_command(image, possible_answers, query)->str:
    image_patch = ImagePatch(image)
    little_girl_patch = image_patch.find(""little girl"")
    if little_girl_patch:
        little_girl_patch = little_girl_patch[0]
        little_girl_shirt_patch_color = little_girl_patch.simple_query(""What is the color of the little girl's shirt?"")
        info = {"Color of little girl's shirt": little_girl_shirt_patch_color}
        answer = select_answer(info, query, possible_answers)
        return answer
    else:
        search_object = "little girl"
        visual_search_ans = image_patch.visual_search(search_object, query, possible_answers):
        if visual_search_ans:
            return visual_search_ans
        return "No little girl found in the image even after visual search"


# What kind of animal is in the poster?
# possible answers: ['The animal in the poster is a dove.', 'The animal in the poster is a cat.', 'The animal in the poster is a horse.', 'The animal in the poster is a dog.']
def execute_command(image, possible_answers, query)->str:
    image_patch = ImagePatch(image)
    poster_patches = image_patch.find(""poster"")
    for poster_patch in poster_patches:
        if poster_patch.exists(""animal""):
            animal_in_poster = poster_patch.simple_query(""What kind of animal is in the poster?"")
            info = {"Animal in the poster": animal_in_poster}
            answer = select_answer(info, query, possible_answers)
            return answer
    search_object = "animal"
    visual_search_ans = image_patch.visual_search(search_object, query, possible_answers):
    if visual_search_ans:
        return visual_search_ans
    return "No animal found in the poster"



# INSERT_QUERY_HERE
# possible answers: EXTRA_CONTEXT_HERE
def execute_command(image)->str: